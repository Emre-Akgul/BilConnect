@model ChatViewer
@{
    ViewData["Title"] = "Chat Room";
}
<style>

    html, body {
        font-family: Arial, sans-serif;
        background-color: #f8f9fa;
        height: 100%;
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }
    .text-center {
        text-align: center;
        margin: 50px auto;
        max-width: 600px;
        padding: 20px;
        background-color: #fff;
        border: 1px solid #ccc;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    h1 {
        font-size: 2em;
        margin-bottom: 20px;
        color: #007bff;
    }

    #messageContainer {
        display: flex;
        flex-direction: column;
        align-items: flex-start;
        border: 1px solid #ccc;
        padding: 10px;
        max-height: 400px;
        overflow-y: auto;
        margin-bottom: 20px;
    }


    #contentContainer {
        display: flex;
        justify-content: space-between;
        align-items: flex-start;
        width: 100%;
        height: 100%;
    }

    #postInfo {
        flex: 1; 
        max-width: 100%; 
    }

    #chatContainer {
        flex: 1;
        max-width: 100%; 
        box-sizing: border-box;
        padding: 0 20px;
    }

    #messageContainer::-webkit-scrollbar {
        width: 8px;
    }

    #messageContainer::-webkit-scrollbar-thumb {
        background-color: #007bff;
        border-radius: 4px;
    }

    .message {
        margin-bottom: 10px;
        padding: 8px;
        border-radius: 8px;
        max-width: 80%;
    }

    .sender {
        background-color: #007bff;
        color: #fff;
        align-self: flex-end;
    }

    .receiver {
        background-color: #333;
        color: #eee;
        align-self: flex-start;
    }

    .dateLabel {
        background-color: #ccc;
        color: #333;
        align-self: center;
    }

    input[type="text"] {
        width: calc(100% - 22px);
        padding: 10px;
        margin-bottom: 10px;
        border: 1px solid #007bff; 
        border-radius: 4px;
        box-sizing: border-box;
        outline: none;
    }

    input[type="text"]:focus {
        border-color: #0056b3;
    }

    button {
        background-color: #007bff;
        color: #fff;
        border: none;
        padding: 10px 20px;
        border-radius: 4px;
        cursor: pointer;
        transition: background-color 0.3s ease;
    }

    button:hover {
        background-color: #0056b3;
    }

</style>
<div class="text-center">
    <h1>Chat for @Model.RelatedPost.Title</h1>
    <h2>Price TL</h2>
    <div id="contentContainer">
        <!-- Left half: Related post information -->
        <div id="postInfo">
            <img src="@Model.RelatedPost.ImageURL" alt="Post Image" style="max-width: 100%;">
            <h2>@Model.RelatedPost.Title</h2>
            <p>@Model.RelatedPost.Description</p>
            <p>Chat with @Model.Receiver.FullName</p>
        </div>

        <!-- Right half: Chat messages -->
        <div id="chatContainer">
            <div id="messageContainer">
                @if (Model.Messages != null)
                {
                    var prevDate = DateTime.Now.Date.AddDays(1);
                    // Load previous messages from the model
                    @foreach (var message in Model.Messages)
                    {
                        // Date label
                        @if (message.Timestamp.Date != prevDate)
                        {
                            <div class="message dateLabel">
                                <small>@message.Timestamp.ToLocalTime().ToString("dd MMM yyyy")</small>
                            </div>
                        }
                        prevDate = message.Timestamp.Date;
                        
                        // If the user is sender
                        @if (message.SenderUserId == Model.User.Id)
                        {
                            <div class="message sender">
                                <p>@message.Content</p>
                                <small class="timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</small>
                            </div>

                        }
                        else // If the user is receiver
                        {
                            <div class="message receiver">
                                <p>@message.Content</p>
                                <small class="timestamp">@message.Timestamp.ToLocalTime().ToString("HH:mm")</small>
                            </div>
                            
                        }

                    }
                }
            </div>
            <input type="text" id="txtMessage" placeholder="Type your message...">
            <button id="btnSendMessage" type="button" class="mdc-button mdc-button--raised mdc-button--dense mdc-ripple-upgraded">
                <i class="material-icons">send</i>
            </button>
        </div>
    </div>
</div>
@section Scripts {
    <script>
       
        // Connecting to SignalR
        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").configureLogging(signalR.LogLevel.Information).build();
        async function start() {
            try {
                await connection.start();
                console.log("SignalR connected.");
            }
            catch (err) {
                console.error(err);
                setTimeOut(start, 5000);
            }
        }
        connection.onclose(async () => {
            await start();
        });
        start();
        
        // Scroll to bottom
        var mc = document.getElementById("messageContainer");
        mc.scrollTop = mc.scrollHeight;
        
        // Send message button
        $('#btnSendMessage').click(function () {
            try {
                const message = $('#txtMessage').val().trim(); // Trim to remove leading and trailing whitespaces
                if (message === '') {
                    // If the message is blank, do not send
                    return;
                }
                var userId = '@Model.User.Id';
                connection.invoke("SendMessage", userId, message);
                $.ajax({
                    type: "POST",
                    url: '@Url.Action("Create", "Messages")',
                    data: { 
                        content : message,
                        userId : userId,
                        chatId : @Model.Id
                    },
                });
                // Clear the text box
                $('#txtMessage').val('');
            } 
            catch (err) {
                console.error(err);
            }
        });

        // Receive message in real-time
        $().ready(function () {
            connection.on("ReceiveMessage", (user, message) => {
                // Determine if the message is from the current user
                const isCurrentUser = user === '@Model.User.Id';

                // Create a new message element accordingly
                function getCurrentTimestamp() {
                    const now = new Date();
                    const hours = String(now.getHours()).padStart(2, '0');
                    const minutes = String(now.getMinutes()).padStart(2, '0');
                    return `${hours}:${minutes}`;
                }
                let newMessage;
                if (isCurrentUser) {
                    newMessage = `
                        <div class="message sender">
                            <p>${message}</p>
                            <small class="timestamp">${getCurrentTimestamp()}</small>
                        </div>`;
                } else {
                    newMessage = `
                        <div class="message receiver">
                            <p>${message}</p>
                            <small class="timestamp">${getCurrentTimestamp()}</small>
                        </div>`;
                }

                // Add the message to the container
                const messageContainer = $('#messageContainer');
                messageContainer.append(newMessage);
                
                // Scroll to bottom
                var mc = document.getElementById("messageContainer");
                mc.scrollTop = mc.scrollHeight;
            });
        });

        // Send message by pressing Enter
        document.getElementById("txtMessage").addEventListener("keyup", function (event) {
            if (event.key === "Enter") {
                document.getElementById("btnSendMessage").click();
            }
        });
    </script>
}
